AWSTemplateFormatVersion: 2010-09-09
Description: Template to create Bootnode used for deploying MAS(BYoL) on existing OpenShift
Parameters:
  OfferingType:
    Description: Select your preferred Suite offering type.
    Type: String
    Default: MAS Core + Cloud Pak for Data
    MinLength: '1'
    AllowedValues:
      - MAS Core + Cloud Pak for Data
      - MAS Core + Manage (no Cloud Pak for Data)
  BootNodeVPCId:
    Description: >-
      Enter the VPC Id to create the bootnode into. Default VPC created by AWS
      will be used if not specified. If existing OpenShift cluster is specified,
      make sure it is reachable from this VPC
    Type: 'AWS::EC2::VPC::Id'
  BootNodeSubnetId:
    Description: Enter the subnet ID from the bootnode VPC to be used for the bootnode.
    Type: 'AWS::EC2::Subnet::Id'
  BootnodeSGIngressCidrIp:
    Description: >-
      Use CIDR notation to enter the IP addresses that can access the bootnode.
      For example, 192.12.33.3/32. To allow access from all IP addresses, enter
      0.0.0.0/0.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form w.x.y.z/a.
  ExocpProvisionedVPCId:
    Description: >-
      Enter the VPC ID where your existing OCP cluster is provisioned. This is required to establish
      VPC Peering from this VPC to the VPC of database in order to establish database connection.
    Type: String
  OpenShiftClusterApiUrl:
    Description: >-
      Enter the cluster's URL in the format
      https://api.<cluster_name>.<domain_name>. Do not specify the port number.
      For example,https://api.masocp.joalae.mas4aws.com
    Type: String
  OpenShiftUser:
    Description: Enter the username of the existing cluster account.
    Type: String
  OpenShiftPassword:
    Description: Enter the password of the existing cluster account.
    Type: String
    NoEcho: true
  EntitledRegistryKey:
    Description: Enter the registry key that you downloaded from the IBM Container Library.
    Type: String
    NoEcho: true
    MinLength: '1'
  MASLicenseUrl:
    Description: >-
      Enter the HTTP or S3 location of your Suite license key file, for example:
      s3://masocp-license/entitlement.lic
    Type: String
    MinLength: '1'
  MASManageDBUser:
    Description: >-
      Enter the username that the Maximo Manage application uses to connect to
      the database.
    Type: String
  MASManageDBPassword:
    Description: >-
      Enter the password that the Maximo Manage application uses to connect to
      the database.
    Type: String
    NoEcho: true
  MASManageDBJdbcUrl:
    Description: >-
      Enter the URL location of the database that the Maximo Manage application
      connects to, for example:
      jdbc:db2://1.2.3.4:50051/FTMDB:sslConnection=true;
    Type: String
  TablespaceNames:
    Description: >-
      Enter the tablespace & indexspace names here if you are not using the default names.
      Each name separated by a delimeter colon (:). For example in this format: <tablespace_name>:<indexspace_name>
      Note: This is not applicable in case of MSSQL database.
    Type: String
  MASManageDBCertificateUrl:
    Description: >-
      Enter the HTTP or S3 location of the database's public certificate, for
      example: s3://masocp-license/db-certificate.crt
    Type: String
  DBProvisionedVPCId:
    Description: >-
      Enter the VPC ID where your existing database (DB2 or Oracle or MSSQL) was provisioned on a private subnet to establish
      VPC Peering from this VPC & the VPC created during current stack deployment in order to establish database connection.
    Type: String
  ImportDemoData:
    Description: >-
      Indicate whether you want to import demo data into the database. This
      might be useful for development or test environments.
    Default: false
    Type: String
    AllowedValues:
      - true
      - false
  SSHKey:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select the public SSH key that you uploaded to the Amazon EC2 service.
  SLSEndpointUrl:
    Description: >-
      Enter the endpoint URL that you retrieved from the 'sls-*' OpenShift route
      in the cluster namespace where SLS is installed. URL should not have slash (/) at the end.
    Type: String
  SLSRegistrationKey:
    Description: >-
      Enter the 'status.registrationKey' value that you retrieved from the
      LicenseService YAML file in the SLS namespace.
    Type: String
  SLSPublicCertificateUrl:
    Description: >-
      Enter the HTTP or S3 location of the service's public certificate that you
      retrieved from the 'ca.crt' file in the 'mas-*-sls-cfg' secret in the MAS
      core namespace.
    Type: String
  UDSEndpointUrl:
    Description: >-
      Enter the endpoint URL that you retrieved from the 'uds-endpoint'
      OpenShift route in the ibm-common-services namespace. URL should not have slash (/) at the end.
    Type: String
  UDSAPIKey:
    Description: >-
      Enter the service's API key that you retrieved from the 'uds-api-key'
      secret in the ibm-common-services namespace.
    Type: String
  UDSPublicCertificateUrl:
    Description: >-
      Enter the HTTP or S3 location of the service's public certificate that you
      retrieved from the 'ca-bundle.pem' file in the 'mas-*-uds-cfg' secret in
      the MAS core namespace.
    Type: String
  EmailNotification:
    Description: >-
      Indicate whether you want to receive emails that contain the connection
      details and credentials for the Suite. These emails are sent only to the
      verified email addresses that you configured in the Amazon SES service.
    Default: false
    Type: String
    AllowedValues:
      - true
      - false
  OperationalMode:
    Description: >-
      Non-production installations can be used for internal development and testing activities only.
    Type: String
    Default: Production
    MinLength: '1'
    AllowedValues:
      - Production
      - Non-production
  MongoDeploymentMode:
    Description: >-
      A new mongo instance will be created on selection of 'Provision a new mongo instance'.
      To use an existing mongo instance, select 'Use an existing mongo instance' option
    Type: String
    Default: "Provision a new mongo instance"
    MinLength: '1'
    AllowedValues:
      - "Provision a new mongo instance"
      - "Use an existing mongo instance"
  MongoDBProvider:
    Description: >-
      Select the desired MongoDB provider.
      Note: When selecting MongoDBProvider as MongoDB and MongoDeploymentMode as 'Provision a new mongo instance', a new "MongoDB Community Edition" instance will be provisioned
    Type: String
    Default: "MongoDB"
    MinLength: '1'
    AllowedValues:
      - "MongoDB"
      - "Amazon DocumentDB"
  MongoAdminUsername:
    Description: >-
      Enter the Mongo Admin Username.
    Type: String
  MongoAdminPassword:
    Description: >-
      Enter the Mongo Admin Password.
    Type: String
    NoEcho: true
  MongoHosts:
    Description: >-
      Enter the Mongo Hosts. eg., docdb-nonwqp-1.abc.ca-central-1.docdb.amazonaws.com:27017,docdb-nonwqp-2.def.ca-central-1.docdb.amazonaws.com:27017
    Type: String
  MongoCAPemFile:
    Description: >-
      Enter the S3 bucket URL where MongoCAPemFile was uploaded.
    Type: String
  DocumentDBProvisionedVPCId:
    Description: >-
      Enter the VPC ID where existing Amazon DocumentDB was provisioned.
      Leave this field blank, if MongoDBProvider was selected as "MongoDB".
      Make sure this VPC ID resides in the current deployment region and does not have matching or overlapping IPv4 CIDR blocks 10.0.0.0/16.
    Type: String
  AWSMSKProvider:
    Description: >-
      Select Yes, to provision a AWS MSK cluster
    Type: String
    Default: "No"
    MinLength: '1'
    AllowedValues:
      - "No"
      - "Yes"
Conditions:
  MongoUseExistingInstanceCondition: !Equals [!Ref MongoDeploymentMode, "Use an existing mongo instance"]

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Maximo Application Suite offering type
        Parameters:
          - OfferingType
      - Label:
          default: >-
            Existing OpenShift cluster connection details (you must complete
            this section)
        Parameters:
          - OpenShiftClusterApiUrl
          - OpenShiftUser
          - OpenShiftPassword
      - Label:
          default: Cluster and bootnode access (you must complete this section)
        Parameters:
          - SSHKey
          - BootnodeSGIngressCidrIp
          - BootNodeVPCId
          - BootNodeSubnetId
          - ExocpProvisionedVPCId
      - Label:
          default: Keys and licenses (you must complete this section)
        Parameters:
          - EntitledRegistryKey
          - MASLicenseUrl
      - Label:
          default: >-
            Maximo Manage database configuration (complete this section only if
            you chose the 'MAS + Manage' offering type.
            In case if this section is left empty and you chose 'MAS + Manage' offering type,
            then We will provision an internal DB2 instance for Manage)
        Parameters:
          - MASManageDBUser
          - MASManageDBPassword
          - MASManageDBJdbcUrl
          - TablespaceNames
          - MASManageDBCertificateUrl
          - DBProvisionedVPCId
          - ImportDemoData
      - Label:
          default: MongoDB Configuration
        Parameters:
          - MongoDeploymentMode
          - MongoDBProvider
      - Label:
          default: >-
            Existing MongoDB / DocumentDB configuration details
            (complete this section only if MongoDeploymentMode was selected as 'Use an existing mongo instance')
        Parameters:
          - MongoAdminUsername
          - MongoAdminPassword
          - MongoHosts
          - MongoCAPemFile
          - DocumentDBProvisionedVPCId
      - Label:
          default: AWS MSK Provider
        Parameters:
          - AWSMSKProvider
      - Label:
          default: >-
            Existing Suite License Service connection details (leave this
            section empty to create a new SLS instance)
        Parameters:
          - SLSEndpointUrl
          - SLSRegistrationKey
          - SLSPublicCertificateUrl
      - Label:
          default: >-
            Existing User Data Services connection details (leave this section
            empty to create a new UDS instance)
        Parameters:
          - UDSEndpointUrl
          - UDSAPIKey
          - UDSPublicCertificateUrl
      - Label:
          default: Email notification
        Parameters:
          - EmailNotification
      - Label:
          default: Operational Mode
        Parameters:
          - OperationalMode
Mappings:
  RegionMap:
    us-east-1:
      HVM64: ami-0ef2a204a69167b2e
    us-east-2:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    us-west-2:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    ca-central-1:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    eu-north-1:
      HVM64: ami-0fc7ab563232d6769
    eu-west-1:
      HVM64: ami-0fc349d82c682cae4
    eu-west-2:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    eu-west-3:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    eu-central-1:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    ap-northeast-1:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    ap-northeast-2:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    ap-northeast-3:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    ap-south-1:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    ap-southeast-1:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    ap-southeast-2:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    sa-east-1:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    af-south-1:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    ap-east-1:
      HVM64: ami-0a8ba8a0fde410499
    ap-southeast-3:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    eu-south-1:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    me-south-1:
      HVM64: ami-xxxxxxxxxxxxxxxxx
    me-central-1:
      HVM64: ami-xxxxxxxxxxxxxxxxx
Resources:
  DeployWaitConditionHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
  DeploymentRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join
        - '-'
        - - masocp-deploy-role
          - !GetAtt
            - CallLambdaRandomizer
            - Lower_RandomString
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: EmbeddedInlinePolicy1
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:CreatePolicy'
                  - 'iam:CreateUser'
                  - 'iam:AttachUserPolicy'
                  - 'iam:CreateAccessKey'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:DeleteBucket'
                  - 'ses:SendEmail'
                  - 'ses:SendRawEmail'
                Resource:
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - iam
                      - ''
                      - !Ref 'AWS::AccountId'
                      - user/*
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - iam
                      - ''
                      - !Ref 'AWS::AccountId'
                      - policy/*
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - s3
                      - ''
                      - ''
                      - !Join
                        - /
                        - - !Ref DeploymentConfigBucket
                          - '*'
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - ses
                      - '*'
                      - !Ref 'AWS::AccountId'
                      - configuration-set/*
                  - !Join
                    - ':'
                    - - arn
                      - aws
                      - ses
                      - '*'
                      - !Ref 'AWS::AccountId'
                      - identity/*
        - PolicyName: EmbeddedInlinePolicy2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ses:ListIdentities'
                  - 'route53:ListHostedZones'
                  - 'ses:GetIdentityVerificationAttributes'
                  - 's3:GetObject'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                  - 'secretsmanager:CreateSecret'
                Resource: '*'
      Path: /
  DeploymentRoleProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Join
        - '-'
        - - masocp-deploy-instance-profile
          - !GetAtt
            - CallLambdaRandomizer
            - Lower_RandomString
      Path: /
      Roles:
        - !Ref DeploymentRole
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join
        - '-'
        - - masocp-lambda-role
          - !Ref 'AWS::Region'
          - !Ref 'AWS::StackName'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: EmbeddedInlinePolicy2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'route53:GetHostedZone'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:DescribeSubnets'
                Resource: '*'
      Path: /
  LambdaFunctionRandomizer:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt
        - LambdaRole
        - Arn
      Runtime: python3.9
      Tags:
        - Key: Name
          Value: RandomizerLambda
      Code:
        ZipFile: |
          import boto3
          import random
          import string
          import cfnresponse
          def lambda_handler(event, context):
              responseData = {}
              try:
                  string_characters = string.ascii_letters + string.digits
                  number_characters = string.digits
                  responseData['RandomString']  = ''.join(random.choice(string_characters) for i in range(int(event["ResourceProperties"]["length"])))
                  while responseData['RandomString'][0].isdigit():
                      responseData['RandomString']  = ''.join(random.choice(string_characters) for i in range(int(event["ResourceProperties"]["length"])))
                  responseData['RandomNumber']  = ''.join(random.choice(number_characters) for i in range(int(event["ResourceProperties"]["length"])))
                  responseData['Lower_RandomString'] = responseData['RandomString'].lower()
                  responseData['UpperRandomString'] = responseData['RandomString'].upper()
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
              except Exception as e:
                  print("Exception Error : " + str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "CustomResourcePhysicalID")
  CallLambdaRandomizer:
    Type: 'Custom::CallLambdaRandomizer'
    Properties:
      ServiceToken: !GetAtt
        - LambdaFunctionRandomizer
        - Arn
      length: 6
  LambdaFunctionGetHostedZoneName:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt
        - LambdaRole
        - Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          import boto3
          import string
          import cfnresponse
          def lambda_handler(event, context):
              responseData = {}
              try:
                  route53_client = boto3.client('route53', region_name=event["ResourceProperties"]["Region"])
                  response = route53_client.get_hosted_zone(Id=event["ResourceProperties"]["ZoneId"])
                  responseData['ZoneName'] = response['HostedZone']['Name'][:-1]
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
              except Exception as e:
                  print("Exception Error : " + str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "CustomResourcePhysicalID")
  DeploymentConfigBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join
        - '-'
        - - masocp
          - !GetAtt
            - CallLambdaRandomizer
            - Lower_RandomString
          - bucket
          - !Ref 'AWS::Region'
      AccessControl: BucketOwnerFullControl
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  LambdaFunctionGetSubnetForBootnode:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt
        - LambdaRole
        - Arn
      Runtime: python3.9
      Code:
        ZipFile: |
          import boto3
          import string
          import cfnresponse
          def lambda_handler(event, context):
              responseData = {}
              try:
                  ec2_client = boto3.client('ec2', region_name=event["ResourceProperties"]["Region"])
                  response = ec2_client.describe_vpcs()
                  for vpc_response in response['Vpcs']:
                    vpc_id = vpc_response['VpcId']
                    is_default = vpc_response['IsDefault']
                    if is_default == True:
                      default_vpc_id = vpc_id
                      break
                  response = ec2_client.describe_subnets()
                  for subnet_response in response['Subnets']:
                    subnet_id = subnet_response['SubnetId']
                    subnet_vpc_id = subnet_response['VpcId']
                    az_id = subnet_response['AvailabilityZoneId']
                    if subnet_vpc_id == default_vpc_id:
                      if "az1" in az_id:
                        responseData['DefaultVPCId'] = subnet_vpc_id
                        responseData['DefaultVPCAz1SubnetId'] = subnet_id
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")
              except Exception as e:
                  print("Exception Error : " + str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData, "CustomResourcePhysicalID")
  CallLambdaFunctionGetSubnetForBootnode:
    Type: 'Custom::CallLambdaFunctionGetSubnetForBootnode'
    Properties:
      ServiceToken: !GetAtt
        - LambdaFunctionGetSubnetForBootnode
        - Arn
      Region: !Ref 'AWS::Region'
  BootnodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for Bootnode
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 0
          ToPort: 0
          CidrIp: !Ref BootnodeSGIngressCidrIp
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref BootnodeSGIngressCidrIp
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref BootNodeVPCId
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - masocp-bootnode-sg
              - !GetAtt
                - CallLambdaRandomizer
                - Lower_RandomString
  Bootnode:
    Type: 'AWS::EC2::Instance'
    Properties:
      SubnetId: !Ref BootNodeSubnetId
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: t3.small
      KeyName: !Ref SSHKey
      SecurityGroupIds:
        - !Ref BootnodeSecurityGroup
      IamInstanceProfile: !Ref DeploymentRoleProfile
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |
              # Initiate the provisioning process
            - ssh-keyscan github.com >> ~/.ssh/known_hosts;
            - cd /root;
            - 'git clone https://github.com/ibm-mas/ansible-devops.git;'
            - cd ansible-devops;
            - rm -rf multicloud-bootstrap 1>/dev/null 2>&1;
            - 'git clone https://github.com/ibm-mas/multicloud-bootstrap.git;'
            - cd multicloud-bootstrap;
            - 'find . -type f -name "*.sh" -exec chmod +x {} \;;'
            - ./init.sh "aws" "
            - !Ref OfferingType
            - '" "'
            - !Ref 'AWS::Region'
            - '" "'
            - !Ref 'AWS::AccountId'
            - '" "'
            - '" "'
            - !GetAtt
              - CallLambdaRandomizer
              - Lower_RandomString
            - '" "'
            - '" "'
            - '" "'
            - !Ref SSHKey
            - '" "'
            - !Ref DeployWaitConditionHandle
            - '" "'
            - !Ref EntitledRegistryKey
            - '" '
            - ''''
            - ''' '''
            - !Ref MASLicenseUrl
            - ''' '''
            - !Ref SLSEndpointUrl
            - ''' '''
            - !Ref SLSRegistrationKey
            - ''' '''
            - !Ref SLSPublicCertificateUrl
            - ''' '''
            - !Ref UDSEndpointUrl
            - ''' '''
            - !Ref UDSAPIKey
            - ''' '''
            - !Ref UDSPublicCertificateUrl
            - ''' '''
            - !Ref MASManageDBUser
            - ''' '''
            - !Ref MASManageDBPassword
            - ''' '''
            - !Ref MASManageDBJdbcUrl
            - ''' '''
            - !Ref MASManageDBCertificateUrl
            - ''' '''
            - !Ref ImportDemoData
            - ''' '''
            - !Ref OpenShiftClusterApiUrl
            - ''' '''
            - !Ref OpenShiftUser
            - ''' '''
            - !Ref OpenShiftPassword
            - ''' '''' '''
            - !Ref EmailNotification
            - ''' '''' '''' '''' '''' '''' '''' '''' '''' '''' '''' '''
            - ''' '''
            - !Ref BootNodeVPCId
            - ''' '''' '''' '''' '''' '''' '''' '''' '''' '''' '''
            - ''' '''
            - !Ref OperationalMode
            - ''' '''
            - !If [MongoUseExistingInstanceCondition, "true", "false"]
            - ''' '''
            - !Ref MongoDBProvider
            - ''' '''
            - !If [MongoUseExistingInstanceCondition, !Ref MongoAdminUsername, ""]
            - ''' '''
            - !If [MongoUseExistingInstanceCondition, !Ref MongoAdminPassword, ""]
            - ''' '''
            - !If [MongoUseExistingInstanceCondition, !Ref MongoHosts, ""]
            - ''' '''
            - !If [MongoUseExistingInstanceCondition, !Ref MongoCAPemFile, ""]
            - ''' '''
            - !If [MongoUseExistingInstanceCondition, !Ref DocumentDBProvisionedVPCId, ""]
            - ''' '''
            - !Ref AWSMSKProvider
            - ''' '''
            - !Ref DBProvisionedVPCId
            - ''' '''
            - !Ref ExocpProvisionedVPCId
            - ''' '''' '''
            - !Ref TablespaceNames
            - ''' "dev" '
            - '2>&1 | tee mas-provisioning.log; '
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - masocp
              - !GetAtt
                - CallLambdaRandomizer
                - Lower_RandomString
              - bootnode
  DeployWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    DependsOn: Bootnode
    Properties:
      Handle: !Ref DeployWaitConditionHandle
      Timeout: 36000
Outputs:
  MASCloudAutomationVersion:
    Description: Version of the MAS automated deployment on Cloud
    Value: '2.0'
  ClusterUniqueString:
    Description: Unique string that is part of cluster resoutce names
    Value: !GetAtt
      - CallLambdaRandomizer
      - Lower_RandomString
  MASInitialSetupUrlLogin:
    Description: >-
      Url to perform MAS initial setup, make sure you have imported the MAS
      public certificate into the browser
    Value: !Select [4, !Split ["#", !GetAtt DeployWaitCondition.Data]]
  MASAdminUrl:
    Description: >-
      Url to login to MAS Admin UI, make sure you have imported the MAS public
      certificate into the browser
    Value: !Select [5, !Split ["#", !GetAtt DeployWaitCondition.Data]]
  MASWorkspaceUrl:
    Description: >-
      Url to login to MAS Workspace, make sure you have imported the MAS public
      certificate into the browser
    Value: !Select [0, !Split ["\"",!Select [0, !Split ["}",!Select [6, !Split ["#", !GetAtt DeployWaitCondition.Data]]]]]]
  DeploymentStatus:
    Description: >-
      Status of the deployment.
    Value:  !Select [1, !Split ["\"", !Select [1, !Split [":", !Select [0, !Split ["#", !GetAtt DeployWaitCondition.Data]]]]]]
  DeploymentDescription:
    Description: >-
      Status description of the deployment.
    Value: !Select [1, !Split ["#", !GetAtt DeployWaitCondition.Data]]

